// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package form3

import (
	"context"
	"sync"
)

// Ensure, that ApiMock does implement Api.
// If this is not the case, regenerate this file with moq.
var _ Api = &ApiMock{}

// ApiMock is a mock implementation of Api.
//
//	func TestSomethingThatUsesApi(t *testing.T) {
//
//		// make and configure a mocked Api
//		mockedApi := &ApiMock{
//			DoFunc: func(ctx context.Context, call *Call) error {
//				panic("mock out the Do method")
//			},
//		}
//
//		// use mockedApi in code that requires Api
//		// and then make assertions.
//
//	}
type ApiMock struct {
	// DoFunc mocks the Do method.
	DoFunc func(ctx context.Context, call *Call) error

	// calls tracks calls to the methods.
	calls struct {
		// Do holds details about calls to the Do method.
		Do []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Call is the call argument value.
			Call *Call
		}
	}
	lockDo sync.RWMutex
}

// Do calls DoFunc.
func (mock *ApiMock) Do(ctx context.Context, call *Call) error {
	if mock.DoFunc == nil {
		panic("ApiMock.DoFunc: method is nil but Api.Do was just called")
	}
	callInfo := struct {
		Ctx  context.Context
		Call *Call
	}{
		Ctx:  ctx,
		Call: call,
	}
	mock.lockDo.Lock()
	mock.calls.Do = append(mock.calls.Do, callInfo)
	mock.lockDo.Unlock()
	return mock.DoFunc(ctx, call)
}

// DoCalls gets all the calls that were made to Do.
// Check the length with:
//
//	len(mockedApi.DoCalls())
func (mock *ApiMock) DoCalls() []struct {
	Ctx  context.Context
	Call *Call
} {
	var calls []struct {
		Ctx  context.Context
		Call *Call
	}
	mock.lockDo.RLock()
	calls = mock.calls.Do
	mock.lockDo.RUnlock()
	return calls
}
